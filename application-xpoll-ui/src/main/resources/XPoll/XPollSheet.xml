<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="XPoll.XPollSheet" locale="">
  <web>XPoll</web>
  <name>XPollSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>XPoll.XPollClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>#if("$!doc.getObject('XPoll.XPollClass').getProperty('name').value" != '')$!doc.getObject('XPoll.XPollClass').getProperty('name').value #elseif($doc.documentReference.name=='XPollSheet' )Polls Sheet #else${doc.title} #end</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#macro (displayPropertyValue $property $action)
  #if ($action)
    #set ($output = $doc.display($property, $action))
  #else
    #set ($output = $doc.display($property))
  #end
  #set ($output = $stringtool.removeStart($output, '{{html clean="false" wiki="false"}}'))
  #set ($output = $stringtool.removeEnd($output, '{{/html}}'))
  $output
#end
#*
 Displays the value of the name property as the title of the document.
 If value is empty (e.g. creation step), displays the document title.
*#
#macro (displayPollTitle)
  #set ($pollObj = $!doc.getObject('XPoll.XPollClass'))
  #if ("$!pollObj.getProperty('name').value" == '')
    #set ($discard = $pollObj.set('name', $doc.title))
  #end
  #displayPropertyValue('name')
#end
#macro(displayInput $votes $isCurrentUser $user $rowIndex)
  #set ($disabled = '')
  #set ($inputName = 'proposals')
  #if (!$isCurrentUser || $pollObj.getValue('status') != 'active')
    #set ($disabled = 'disabled')
    #set ($inputName = "${inputName}$!{rowIndex}")
  #end
  #foreach ($proposal in $proposals)
    #set ($isChecked = $votes.contains($proposal))
    #set ($checked = '')
    #if ($isChecked)
      #set ($checked = 'checked')
    #end
    &lt;td&gt;
      #if ($xcontext.action == 'export')
        #if($isChecked)X#end
      #else
        &lt;label&gt;
          ## Display the inputs for the condorcet polls.
          #if ($pollObj.getValue('type') == 'condorcet')
            #set ($indexOfProposal = $votes.indexOf($proposal) + 1)
            #set ($noOption = '')
            #if ($indexOfProposal &lt; 1)
              #set ($noOption = 'selected')
            #end

            #if ($disabled.isEmpty())
              &lt;select class="xpollSelect" data-proposal="$escapetool.xml($proposal)"&gt;
                &lt;option disabled $noOption value=""&gt;
                  $escapetool.xml($services.localization.render('contrib.xpoll.vote.select'))
                &lt;/option&gt;
                #foreach ($index in [1..$proposals.size()])
                  &lt;option value="$index" #if($index == $indexOfProposal)selected#end&gt;
                    #$index
                  &lt;/option&gt;
                #end
              &lt;/select&gt;
              ## The hidden inputs that will have the values sent by the form.
              &lt;input class="xpollHiddenInput" id="option$foreach.count" name="proposals"
               #if ($votes.size() &gt; $foreach.index)value="$escapetool.xml($votes.get($foreach.index))"#end
                type="hidden"/&gt;
            #else
              &lt;input type="checkbox" $checked $disabled /&gt;
              #if ($indexOfProposal &gt; 0)
                &lt;span class="label label-primary"&gt;#$indexOfProposal&lt;/span&gt;
              #end
            #end
          ## Display the inputs for the normal polls.
          #else
            &lt;input type="#if($isRadio)radio#{else}checkbox#end"
              #if($isCurrentUser)id="xpoll-proposal$proposal.hashCode()"#end name="${inputName}"
              value="$escapetool.xml($proposal)" $checked
              $disabled /&gt;
          #end
        &lt;/label&gt;
      #end
    &lt;/td&gt;
  #end
#end
#macro(setDefaultProperty $obj $propertyName $defaultValue)
  #if ("$!obj.getValue($propertyName)" == "")
    #set ($discard = $doc.set($propertyName, $defaultValue))
  #end
#end
{{/velocity}}

{{velocity}}
#set ($pollObj = $doc.getObject('XPoll.XPollClass'))
#setDefaultProperty($pollObj 'status' 'inpreparation')
#set ($status = $pollObj.getValue('status'))
#setDefaultProperty($pollObj 'pollPublicity' 'private')
#set ($pollPublicity = $pollObj.getValue('pollPublicity'))
#setDefaultProperty($pollObj 'votePrivacy', 'public')
#set ($votePrivacy = $pollObj.getValue('votePrivacy'))
#set ($cookieId = $request.getCookie("poll_publicity_id").getValue())
#set ($discard = $xwiki.jsx.use('XPoll.XPollJSExtension'))
#set ($discard = $xwiki.ssx.use('XPoll.XPollSheet'))
## Check if the document needs migration
#setDefaultProperty($pollObj, 'type', 'multi')
#set ($type = $pollObj.getValue('type'))
#set ($types = {
  '0': 'multi',
  '1': 'single'
})
#set ($canMigrate = $hasEdit || $hasAdmin)
#if ($types.containsKey($type))
  #if ($request.migrate &amp;&amp; $canMigrate &amp;&amp; $services.csrf.isTokenValid($request.form_token))
    #set ($discard = $pollObj.set('type', $types.get($type)))
    #set ($discard = $doc.save($services.localization.render('xpoll.migration.migrated')))
  #else
    {{warning}}
    {{translation key="xpoll.migration.shouldMigrateOne" /}}
    #if ($canMigrate)
      {{translation key="xpoll.migration.migrate" /}}
      [[{{translation key="xpoll.migration.linkText" /}}&gt;&gt;||queryString="migrate=true&amp;form_token=$services.csrf.getToken()"]]
    #else
      {{translation key="xpoll.migration.notifyAdmin" /}}
    #end
    {{/warning}}
  #end
#end

## Flag indicating whether to show all users or only the current user, depending on vote privacy
#set ($displayAllUsers = $hasEdit || $votePrivacy == 'public')
#set ($isCurrentContextUserGuest = $xcontext.user == 'XWiki.XWikiGuest')
#if ($xcontext.action == 'view' &amp;&amp; $status == 'inpreparation')
  #if ($hasEdit)
    $services.rendering.escape($services.localization.render('contrib.xpoll.preparation.hasRight'), 'xwiki/2.1')
  #else
    $services.rendering.escape($services.localization.render('contrib.xpoll.preparation.noRight'), 'xwiki/2.1')
  #end
#end
## Flag to know wheter the options must be displayed as checkbox or radio inputs.
#set ($isRadio = $pollObj.getProperty('type').value == 'single')
#if ($hasEdit &amp;&amp; ($xcontext.action == 'edit' || $status == 'inpreparation'))
  {{html clean='false'}}
  #set ($discard = $xwiki.ssx.use('AppWithinMinutes.ClassSheetGenerator'))
  #set ($discard = $doc.use('XPoll.XPollClass'))
  ## We don't have access to the form element to set the CSS class for the vertical form layout standard.
  &lt;div class="xform"&gt;
    #if ($xcontext.action == 'edit')
      &lt;dl&gt;
        &lt;dt&gt;&lt;label for="XPoll.XPollClass_0_name"&gt;$doc.displayPrettyName('name', false, false)&lt;/label&gt;&lt;/dt&gt;
        &lt;dd&gt;#displayPollTitle()&lt;/dd&gt;
      &lt;/dl&gt;
    #end
    &lt;div class="row inline-input-row"&gt;
      &lt;div class="col-xs-12 col-sm-4"&gt;
        &lt;dl&gt;
          &lt;dt&gt;
            &lt;label #if($xcontext.action=='edit' )for="XPoll.XPollClass_0_proposals" #end&gt;
              $doc.displayPrettyName('proposals', false, false)
            &lt;/label&gt;
            &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('XPoll.XPollClass_proposals_hint'))&lt;/span&gt;
          &lt;/dt&gt;
          &lt;dd&gt;#displayPropertyValue('proposals')&lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
      &lt;div class="col-xs-12 col-sm-4"&gt;
        &lt;dl&gt;
          &lt;dt&gt;
            &lt;label #if($xcontext.action=='edit' )for="XPoll.XPollClass_0_status" #end&gt;
              $doc.displayPrettyName('status', false, false)
            &lt;/label&gt;
            &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('XPoll.XPollClass_status_hint'))&lt;/span&gt;
          &lt;/dt&gt;
          &lt;dd&gt;
            #if($xcontext.action == 'view')
              &lt;span class="label label-warning"&gt;#displayPropertyValue('status')&lt;/span&gt;
            #else
              #displayPropertyValue('status')
            #end
          &lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;

      &lt;div class="col-xs-12 col-sm-4"&gt;
        #if ($doc.getValue('status') == 'inpreparation' &amp;&amp; ($hasAdmin || $xcontext.user == $doc.creator))
          &lt;dl&gt;
            &lt;dt&gt;
              &lt;label #if($xcontext.action == 'edit')for="XPoll.XPollClass_0_type"#end&gt;
                $doc.displayPrettyName('type', false, false)
              &lt;/label&gt;
              &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('XPoll.XPollClass_type_hint'))&lt;/span&gt;
            &lt;/dt&gt;
            &lt;dd&gt;
              #displayPropertyValue('type')
            &lt;/dd&gt;
          &lt;/dl&gt;
        #end
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="row inline-input-row"&gt;
      &lt;div class="col-xs-12 col-sm-4"&gt;
        &lt;dl&gt;
          &lt;dt&gt;
            &lt;label #if($xcontext.action == 'edit')for="XPoll.XPollClass_0_votePrivacy"#end&gt;
              $doc.displayPrettyName('votePrivacy', false, false)
            &lt;/label&gt;
            &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('XPoll.XPollClass_votePrivacy_hint'))&lt;/span&gt;
          &lt;/dt&gt;
          &lt;dd&gt;
            #displayPropertyValue('votePrivacy')
          &lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
      &lt;div class="col-xs-12 col-sm-4"&gt;
        &lt;dl&gt;
          &lt;dt&gt;
            &lt;label #if($xcontext.action=='edit' )for="XPoll.XPollClass_0_pollPublicity" #end&gt;
              $doc.displayPrettyName('pollPublicity', false, false)
            &lt;/label&gt;
            &lt;span class="xHint"&gt;$escapetool.xml($services.localization.render('XPoll.XPollClass_pollPublicity_hint'))&lt;/span&gt;
          &lt;/dt&gt;
          &lt;dd&gt;
            #displayPropertyValue('pollPublicity')
          &lt;/dd&gt;
        &lt;/dl&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;dl&gt;
      #if ($xcontext.action == 'edit' || "$!doc.getValue('description')" != '')
        &lt;dt&gt;
          &lt;label #if($xcontext.action == 'edit')for="XPoll.XPollClass_0_description"#end&gt;
            $doc.displayPrettyName('description', false, false)
          &lt;/label&gt;
        &lt;/dt&gt;
        &lt;dd&gt; #displayPropertyValue('description')&lt;/dd&gt;
      #else
        $escapetool.xml($services.localization.render('XPoll.XPollClass_description_emptyvalue'))
      #end
    &lt;/dl&gt;
  &lt;/div&gt;
  {{/html}}
#else
  #set ($proposals = $pollObj.getValue('proposals'))
  #set ($isPollPublicityPublic = $pollPublicity == 'public')
  ## Check to see if an user can vote.
  #set ($userCanVote = !$isCurrentContextUserGuest || $isPollPublicityPublic)
  #if($displayAllUsers)
    #set ($usersCount = $doc.getObjects('XPoll.XPollVoteClass').size())
    ## Count only the existing users, without the deleted users.
    ## This is needed to update the number of user when the status is active and the deleted users are hidden.
    #set ($usersCountActive = 0)
    #foreach ($obj in $doc.getObjects('XPoll.XPollVoteClass'))
      #if ($xwiki.exists($obj.user) || (!$obj.guestId.isEmpty()))
        #set ($usersCountActive = $usersCountActive + 1)
      #end
    #end
    ## Votes count.
    #set ($totalVotesCount = 0)
    #set ($voteCount = $services.xpoll.getVoteResults($doc.documentReference))
    #foreach ($key in $voteCount.keySet())
      #set ($totalVotesCount = $totalVotesCount + $voteCount.get($key))
    #end
  #end
  #set ($currentGuestUserVoted = false)
  #set ($currentUserVoted = false)
  #foreach ($voteObj in $doc.getObjects('XPoll.XPollVoteClass'))
    #if ($cookieId.equals($voteObj.getValue('guestId')) &amp;&amp; $isCurrentContextUserGuest)
      #set ($currentGuestUserVoted = true)
    #end
    #if ($voteObj.getValue('user').equals($xcontext.user))
      #set ($currentUserVoted = true)
    #end
  #end
  #set ($showPollSummary = !$isCurrentContextUserGuest || $currentGuestUserVoted || $userCanVote || ($usersCountActive &gt; 0 &amp;&amp; $displayAllUsers ))
  #if ($status == 'active')
    #if ($showPollSummary)
      $doc.display('description')
    #end
    #set ($restURL = $services.xpoll.url($doc.documentReference))
    #if (!$isPollPublicityPublic &amp;&amp; $currentGuestUserVoted)
      {{warning}}
      $escapetool.xml($services.localization.render('contrib.xpoll.guestCannotChangeVote'))
      {{/warning}}

    #end
    #if (!($showPollSummary || $displayAllUsers))
      {{warning}}
      $escapetool.xml($services.localization.render('contrib.xpoll.emptyPage'))
      {{/warning}}
    #end
    {{html clean='false'}}
    &lt;form id="xpollSaveForm" action="$restURL" method="put"&gt;
      &lt;div id="xpollTableWrapper"&gt;
        &lt;table class='xpoll medium-avatars table table-bordered'&gt;
          ## Table header row.
          #if ($showPollSummary)
            &lt;thead&gt;
              &lt;tr&gt;
                &lt;th&gt;
                  #if($displayAllUsers)
                    #if($usersCountActive == 1)
                      $escapetool.xml($services.localization.render('contrib.xpoll.singleUser'))
                    #else
                      $escapetool.xml($services.localization.render('contrib.xpoll.user'))
                      &lt;span class='count'&gt;($usersCountActive)&lt;/span&gt;
                    #end
                  #elseif ($currentGuestUserVoted || $currentUserVoted)
                    $escapetool.xml($services.localization.render('contrib.xpoll.singleUser'))
                  #else
                    $escapetool.xml($services.localization.render('contrib.xpoll.user'))
                    &lt;span class='count'&gt;(0)&lt;/span&gt;
                  #end
                &lt;/th&gt;
                #foreach($proposal in $proposals)
                  &lt;th&gt;
                    &lt;label for="xpoll-proposal$proposal.hashCode()"&gt;
                      $proposal
                    &lt;/label&gt;
                  &lt;/th&gt;
                #end
              &lt;/tr&gt;
            &lt;/thead&gt;
          #end
          ## Users and their votes.
          &lt;tbody&gt;
            #set ($foundUser = false)
            #set ($foundGuestUser = false)
            #foreach ($voteObj in $doc.getObjects('XPoll.XPollVoteClass'))
              #set ($user = $voteObj.user)
              #set ($guestId = $voteObj.getValue('guestId'))
              #set ($isVoteFromGuest = "$guestId" != "")
              #set ($isVoteFromCurrentGuest = $cookieId.equals($guestId) &amp;&amp; $isCurrentContextUserGuest)
              #set ($isCurrentUser = $user.equals($xcontext.user) &amp;&amp; !$isVoteFromGuest)
              #set ($votes = $voteObj.getValue('votes'))
              #set ($guestName = $voteObj.getValue('user'))
              #set ($escapedGuestName = $escapetool.xml($guestName))
              #if ($isCurrentUser)
                #set ($foundUser = true)
              #end
              #if ($isVoteFromCurrentGuest)
                #set ($foundGuestUser = true)
              #end
              ## Display the input for a guest user that already voted
              #if ($isVoteFromCurrentGuest)
                &lt;tr class="active"&gt;
                  &lt;td&gt;
                    &lt;input type="text" value="$escapedGuestName" name="guestName" #if(!$isPollPublicityPublic) disabled#end&gt;
                  &lt;/td&gt;
                  #displayInput($votes $isPollPublicityPublic $guestName $foreach.index)
                &lt;/tr&gt;
              #end
              #if ($displayAllUsers)
                ## display the vote for a guest user that is not the current user
                #if ($isVoteFromGuest &amp;&amp; !$isVoteFromCurrentGuest)
                  &lt;tr&gt;
                    &lt;td&gt;
                      $escapedGuestName
                    &lt;/td&gt;
                    #displayInput($votes false $guestName $foreach.index)
                  &lt;/tr&gt;
                ## display the vote for users who are logged in or have voted while logged in
                #elseif ($xwiki.exists($user) &amp;&amp; !$isVoteFromGuest)
                  &lt;tr #if ($isCurrentUser) class="active" #end&gt;
                    &lt;td&gt;
                      #displayUser($user, {'wrapAvatar': true})
                    &lt;/td&gt;
                    #displayInput($votes $isCurrentUser $user $foreach.index)
                  &lt;/tr&gt;
                #end
              #else
                &lt;tr class="active"&gt;
                  #if ($isCurrentUser)
                    &lt;td&gt;
                      #displayUser($user, {'wrapAvatar': true})
                    &lt;/td&gt;
                    #displayInput($votes $isCurrentUser $user 0)
                  #end
                &lt;/tr&gt;
              #end
            #end

            ## Display the current user if he hasn't voted yet.
            #if (!$foundUser &amp;&amp; !$isCurrentContextUserGuest)
              &lt;tr class="active"&gt;
                &lt;td&gt;
                  #displayUser($xcontext.user, {'wrapAvatar': true})
                &lt;/td&gt;
                ## The 3rd parameter is true in order to not disable the input for current user.
                #displayInput([] true $xcontext.user)
              &lt;/tr&gt;
            #end
            #if (!$foundGuestUser &amp;&amp; $isCurrentContextUserGuest &amp;&amp; $isPollPublicityPublic)
              &lt;tr class="active"&gt;
                &lt;td&gt;
                  &lt;input type="text" name="guestName" value="" placeholder="Name..."&gt;
                  #displayInput([] true $xcontext.user)
                &lt;/td&gt;
              &lt;/tr&gt;
            #end
          &lt;/tbody&gt;
          #if ($displayAllUsers &amp;&amp; $showPollSummary)
            &lt;tfoot&gt;
              &lt;tr&gt;
                &lt;td&gt;
                  $escapetool.xml($services.localization.render('contrib.xpoll.numberVotes'))
                  &lt;span class='count'&gt;($totalVotesCount)&lt;/span&gt;
                &lt;/td&gt;
                #foreach ($proposal in $proposals)
                  &lt;td&gt; $!voteCount.get($proposal) &lt;/td&gt;
                #end
              &lt;/tr&gt;
            &lt;/tfoot&gt;
          #end
        &lt;/table&gt;
      &lt;/div&gt;
      #if (!$isCurrentContextUserGuest || $isPollPublicityPublic)
        &lt;div class='save'&gt;
          &lt;input type="submit" value="$escapetool.xml($services.localization.render("contrib.xpoll.vote.user.submit"))"
            class="button"/&gt;
        &lt;/div&gt;
      #end
    &lt;/form&gt;
    {{/html}}
  #elseif ($status == 'finished')
    #if(!$totalVotesCount)
      #set ($totalVotesCount = 0)
      #set ($voteCount = $services.xpoll.getVoteResults($doc.documentReference))
      #foreach ($key in $voteCount.keySet())
        #set ($totalVotesCount = $totalVotesCount + $voteCount.get($key))
      #end
    #end
    #set ($showPollSummary = !$isCurrentContextUserGuest || $currentGuestUserVoted || $userCanVote || ($displayAllUsers &amp;&amp; $usersCount &gt; 0))
    {{html wiki='true' clean='false'}}
    #if ($showPollSummary)
      $doc.display('description')
      $escapetool.xml($services.localization.render('contrib.xpoll.finish.message'))
    #end
    #if (!$showPollSummary)
      {{warning}}
      $escapetool.xml($services.localization.render('contrib.xpoll.emptyPage'))
      {{/warning}}
    #end
    &lt;div id="xpollTableWrapper"&gt;
      &lt;table class='xpoll medium-avatars table table-bordered'&gt;
        ## Table header row.
        #if ($showPollSummary)
          &lt;tr&gt;
            &lt;th&gt;
              #if($displayAllUsers)
                #if($usersCountActive == 1)
                  $escapetool.xml($services.localization.render('contrib.xpoll.singleUser'))
                #else
                  $escapetool.xml($services.localization.render('contrib.xpoll.user'))
                  &lt;span class='count'&gt;($usersCount)&lt;/span&gt;
                #end
              #elseif ($currentGuestUserVoted || $currentUserVoted)
                $escapetool.xml($services.localization.render('contrib.xpoll.singleUser'))
              #else
                $escapetool.xml($services.localization.render('contrib.xpoll.user'))
                &lt;span class='count'&gt;(0)&lt;/span&gt;
              #end
            &lt;/th&gt;
            #foreach ($proposal in $proposals)
              &lt;th&gt; $proposal &lt;/th&gt;
            #end
          &lt;/tr&gt;
        #end
        ## Users and their votes.
        #foreach ($voteObj in $doc.getObjects('XPoll.XPollVoteClass'))
          #set ($user = $voteObj.user)
          #set ($votes = $voteObj.getValue('votes'))
          #set ($guestName = $voteObj.getValue('user'))
          #set ($escapedGuestName = $escapetool.xml($guestName))
          #set ($guestId = $voteObj.getValue('guestId'))
          #set ($isVoteFromGuest = "$guestId" != "")
          #set ($isVoteFromCurrentGuest = $cookieId.equals($guestId) &amp;&amp; $isCurrentContextUserGuest)
          #set ($isCurrentUser = $user == $xcontext.user &amp;&amp; !$isVoteFromGuest)
          #if($displayAllUsers)
            &lt;tr #if($isCurrentUser || $isVoteFromCurrentGuest)class="active"#end&gt;
              #if ($isVoteFromGuest)
                &lt;td&gt;
                 $escapedGuestName
                &lt;/td&gt;
                ## The 3rd parameter is false in order to disable the input when the poll is finished.
                #displayInput($votes false $guestName $foreach.index)
              #else
                &lt;td&gt;
                  #displayUser($user, {'wrapAvatar': true})
                &lt;/td&gt;
                ## The 3rd parameter is false in order to disable the input when the poll is finished.
                #displayInput($votes false $user $foreach.index)
              #end
            &lt;/tr&gt;
          #else
            &lt;tr class="active"&gt;
              #if ($isVoteFromCurrentGuest)
                &lt;td&gt;
                  $escapedGuestName
                &lt;/td&gt;
                #displayInput($votes false $guestName 0)
              #elseif ($isCurrentUser)
                &lt;td&gt;
                  #displayUser($user, {'wrapAvatar': true})
                &lt;/td&gt;
                ## The 3rd parameter is false in order to disable the input when the poll is finished.
                #displayInput($votes false $user 0)
              #end
            &lt;/tr&gt;
          #end
        #end
        #if ($showPollSummary)
          &lt;tr&gt;
            &lt;td&gt;
              $escapetool.xml($services.localization.render('contrib.xpoll.numberVotes'))
              &lt;span class='count'&gt;($totalVotesCount)&lt;/span&gt;
            &lt;/td&gt;
            #foreach ($proposal in $proposals)
              &lt;td&gt; $!voteCount.get($proposal) &lt;/td&gt;
            #end
          &lt;/tr&gt;
        #end
      &lt;/table&gt;
    &lt;/div&gt;
    {{/html}}
  #end
#end
{{/velocity}}</content>
  <object>
    <name>XPoll.XPollSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>2e6c978e-e29f-499b-932d-37acb37bd183</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

/*
 * Changed overflow properties to make the table header sticky.
 * This causes problems when your table width is pretty hight.
*/
#xwikicontent {
  overflow: visible;
}

#xpollTableWrapper{
  overflow-x: auto;
}

.xpoll th, .xpoll td {
  border: 1px solid $theme.borderColor;
}

.xpoll th {
  background-color: $theme.backgroundSecondaryColor;
  position: sticky;
  z-index: 2;
  top: 0;
}

.xpoll th label,
.xpoll td label {
  font-weight: bold;
  display: block;
}

.polls {
  width: 100%;
}

.polls:last-of-type {
  margin-top: 10px;
}

.polls.secondary {
  color: $theme.textSecondaryColor;
}

.save {
  text-align: left;
}
.xpollSelect {
  width: 100%;
}

.active {
  font-weight: bold;
}

.count {
  color: $theme.textSecondaryColor;
}
@media (min-width: 768px) {

  .inline-input-row {
    display: flex;
    flex-direction: row;
  }

  .inline-input-row &gt; .col-sm-4 {
    padding-bottom: 1em;
  }

  .inline-input-row &gt; .col-sm-4 &gt; dl {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100%;
  }

}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>XPoll CSS Extension</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
